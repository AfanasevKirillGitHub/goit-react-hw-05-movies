{"version":3,"file":"static/js/145.685fbd83.chunk.js","mappings":"sPAIaA,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAkBMC,EAAY,WAChBD,EAAe,GAChB,EAED,OACE,kBAAMH,SAjBa,SAAAK,GAGnB,GAFAA,EAAMC,iBAEqB,KAAvBJ,EAAYK,OAGd,OAFAC,EAAAA,GAAAA,MAAY,kCACZJ,IAGFJ,EAASE,GACTE,GACD,EAOC,WACE,kBACEK,SAvBe,SAAAJ,GACnBF,EAAeE,EAAMK,OAAOC,MAAMC,cACnC,EAsBKD,MAAOT,EACPW,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,+BAEd,mBAAQH,KAAK,SAAb,sBAGL,E,mCCoBD,EArDe,WAAO,IAAD,EACnB,GAA0CZ,EAAAA,EAAAA,UAAS,IAAnD,eAAOgB,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAW,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAC3CC,GAAWC,EAAAA,EAAAA,MAsBjB,OAhBAC,EAAAA,EAAAA,YAAU,WACR,GAAoB,KAAhBJ,EAAoB,CACtB,IAAMK,EAAS,mCAAG,gHAIJC,EAAAA,EAAAA,IAAeN,GAJX,gBAGJO,EAHI,EAGZC,KAAQD,QAEVX,EAAiBW,GALH,gDAOdE,QAAQC,IAAR,MAPc,yDAAH,qDAUfL,EAAUL,EACX,CACF,GAAE,CAACA,KAGF,4BACE,SAACvB,EAAD,CAAYC,SAtBK,SAAAsB,GACnBD,EAAgC,KAAhBC,EAAqB,CAAEW,MAAOX,GAAgB,CAAC,EAChE,KAqBG,wBACGL,EAAciB,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACrC,OACE,yBACE,UAAC,KAAD,CAAMC,GAAE,UAAKH,GAAMI,MAAO,CAAEC,KAAMhB,GAAlC,WACE,gBACEiB,IACEL,EAAW,yCAC2BA,GAClCM,EAENC,IAAKN,KAEP,uBAAIA,QAVCF,EAcZ,QAIR,C","sources":["components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [searchValue, setSearchValue] = useState('');\n\n  const handleChange = event => {\n    setSearchValue(event.target.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (searchValue.trim() === '') {\n      toast.error('Please enter your request');\n      resetForm();\n      return;\n    }\n    onSubmit(searchValue);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setSearchValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        onChange={handleChange}\n        value={searchValue}\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Please enter your request\"\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getSearchMovie } from 'services/movieAPI';\nimport NoPoster from '../../images/NoPoster.png';\n\nconst Movies = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const searchMovie = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const handleSubmit = searchMovie => {\n    setSearchParams(searchMovie !== '' ? { query: searchMovie } : {});\n  };\n\n  useEffect(() => {\n    if (searchMovie !== '') {\n      const fetchData = async () => {\n        try {\n          const {\n            data: { results },\n          } = await getSearchMovie(searchMovie);\n          setSearchResults(results);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      fetchData(searchMovie);\n    }\n  }, [searchMovie]);\n\n  return (\n    <div>\n      <SearchForm onSubmit={handleSubmit}></SearchForm>\n      <ul>\n        {searchResults.map(({ id, poster_path, title }) => {\n          return (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                <img\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w342${poster_path}`\n                      : NoPoster\n                  }\n                  alt={title}\n                />\n                <p>{title}</p>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["SearchForm","onSubmit","useState","searchValue","setSearchValue","resetForm","event","preventDefault","trim","toast","onChange","target","value","toLowerCase","type","autoComplete","autoFocus","placeholder","searchResults","setSearchResults","useSearchParams","searchParams","setSearchParams","searchMovie","get","location","useLocation","useEffect","fetchData","getSearchMovie","results","data","console","log","query","map","id","poster_path","title","to","state","from","src","NoPoster","alt"],"sourceRoot":""}